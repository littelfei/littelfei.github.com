<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[收集的一些代码题]]></title>
      <url>/2017/08/26/%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%A2%98/</url>
      <content type="html"><![CDATA[<ol>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;alert(<span class="keyword">this</span>.a)&#125;&#125;; </div><div class="line"><span class="keyword">var</span> fun =obj.b; </div><div class="line">fun();</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行结果是：弹出undefined<br>答案解析：这里的函数作为普通函数调用,产生的this对象为window,那么alert(this.a)即为window.a是没有定义的,结果就是undefined.可将代码改为<code>var obj ={a:1,b:function () {alert(this.a)}};var fun =obj.b;fun.call(obj)</code> 此时结果为1.<br><br><br>2.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="string">"undefined"</span>, b=<span class="string">"false"</span>, c=<span class="string">"null"</span>, d=<span class="string">""</span>,e=<span class="string">"0"</span>;</div><div class="line"><span class="keyword">var</span> f=<span class="literal">undefined</span>,g=<span class="literal">false</span>,h=<span class="literal">null</span>,i=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"true"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"false"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(assert(a));<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(assert(b));<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(assert(c));<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(assert(d));<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(assert(e));<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(assert(f));<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(assert(g));<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(assert(h));<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(assert(i));<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(assert(j));<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>if（condition）的condition求值结果若非布尔值，ECMAScript会自动调用Boolean()转换函数将结果转换为布尔值。转换规则为:</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">转换为true的</th>
<th style="text-align:center">转换为false的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">String</td>
<td style="text-align:center">任何非空字符串</td>
<td style="text-align:center">“”（空字符串）</td>
</tr>
<tr>
<td style="text-align:center">Number</td>
<td style="text-align:center">任何非零数值（包括无穷大）</td>
<td style="text-align:center">0和NaN</td>
</tr>
<tr>
<td style="text-align:center">Object</td>
<td style="text-align:center">任何对象</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">undefined</td>
<td style="text-align:center">–</td>
<td style="text-align:center">undefined</td>
</tr>
</tbody>
</table>
<p><br><br>3.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(i++);</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f1=Foo(),f2=Foo();</div><div class="line">f1();</div><div class="line">f1();</div><div class="line">f2();</div></pre></td></tr></table></figure></p>
<p>输出结果：010<br>这是一个闭包,闭包可以用在许多地方.它的最大用处有两个,一个是可以读取函数内部的变量,另一个就是让这些变量的值始终保持在内存中.<br>这里的局部变量i,对f1()来说是全局变量,对f2()来说也是全局变量,但是f1()的i跟f2()的i又是相互独立相互不可见的,f1()每执行一次,f1()的i就加一,f2()每次执行一次,f2()的i就加一，但是相互之间不影响,因此结果是010.</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一个关于闭包的例子]]></title>
      <url>/2017/08/22/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85%E7%9A%84%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>查看解析<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elements=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">var</span> length=elements.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">    elements[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>依次点击4个li标签，输出结果：4 4 4 4</p>
<blockquote>
<p><strong>答案解析：</strong>elements[i].onclick=function(){alert(i);}是一个<code>闭包</code>函数,<code>闭包</code>允许内层函数引用父函数中的变量，但是该变量是最终值.这里的闭包函数的作用域中保存着闭包的活动对象(这里为空)和全局变量对象(主要是i),所以它们引用的是同一变量i;当点击完成后,变量i=4,也就是每个内部函数i的值都是4.<br><br><br>可以通过创建另一个匿名函数强制让闭包的行为符合预期：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elements=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">var</span> length=elements.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">    elements[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(num);</div><div class="line">        &#125;;</div><div class="line">    &#125;(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>输出结果：0 1 2 3</p>
<blockquote>
<p>在调用匿名函数是,我们传入变量i,由于参数是按值传递的,所以就会将变量i的当前值复制给参数num.而这个匿名函数内部又创建并输出了一个访问num的闭包.这样,每一次点击都有num变量的一个副本,因此可以返回各自不同的值.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS书写顺序]]></title>
      <url>/2017/08/19/CSS%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<ol>
<li>Display &amp; Flow</li>
<li>Positioning</li>
<li>Dimensions</li>
<li>Margins, Padding, Borders, Outline</li>
<li>Typographic Styles</li>
<li>Backgrounds</li>
<li>Opacity, Cursors, Generated Content</li>
</ol>
<p><strong>例子：</strong><br> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">el</span> &#123;</div><div class="line">    <span class="attribute">display</span>: ;</div><div class="line">    <span class="attribute">visibility</span>: ;</div><div class="line">    <span class="attribute">float</span>: ;</div><div class="line">    <span class="attribute">clear</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">position</span>: ;</div><div class="line">    <span class="attribute">top</span>: ;</div><div class="line">    <span class="attribute">right</span>: ;</div><div class="line">    <span class="attribute">bottom</span>: ;</div><div class="line">    <span class="attribute">left</span>: ;</div><div class="line">    <span class="attribute">z-index</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">width</span>: ;</div><div class="line">    <span class="attribute">min-width</span>: ;</div><div class="line">    <span class="attribute">max-width</span>: ;</div><div class="line">    <span class="attribute">height</span>: ;</div><div class="line">    <span class="attribute">min-height</span>: ;</div><div class="line">    <span class="attribute">max-height</span>: ;</div><div class="line">    <span class="attribute">overflow</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">margin</span>: ;</div><div class="line">    <span class="attribute">margin-top</span>: ;</div><div class="line">    <span class="attribute">margin-right</span>: ;</div><div class="line">    <span class="attribute">margin-bottom</span>: ;</div><div class="line">    <span class="attribute">margin-left</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">padding</span>: ;</div><div class="line">    <span class="attribute">padding-top</span>: ;</div><div class="line">    <span class="attribute">padding-right</span>: ;</div><div class="line">    <span class="attribute">padding-bottom</span>: ;</div><div class="line">    <span class="attribute">padding-left</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">border</span>: ;</div><div class="line">    <span class="attribute">border-top</span>: ;</div><div class="line">    <span class="attribute">border-right</span>: ;</div><div class="line">    <span class="attribute">border-bottom</span>: ;</div><div class="line">    <span class="attribute">border-left</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">border-width</span>: ;</div><div class="line">    <span class="attribute">border-top-width</span>: ;</div><div class="line">    <span class="attribute">border-right-width</span>: ;</div><div class="line">    <span class="attribute">border-bottom-width</span>: ;</div><div class="line">    <span class="attribute">border-left-width</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">border-style</span>: ;</div><div class="line">    <span class="attribute">border-top-style</span>: ;</div><div class="line">    <span class="attribute">border-right-style</span>: ;</div><div class="line">    <span class="attribute">border-bottom-style</span>: ;</div><div class="line">    <span class="attribute">border-left-style</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">border-color</span>: ;</div><div class="line">    <span class="attribute">border-top-color</span>: ;</div><div class="line">    <span class="attribute">border-right-color</span>: ;</div><div class="line">    <span class="attribute">border-bottom-color</span>: ;</div><div class="line">    <span class="attribute">border-left-color</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">outline</span>: ;</div><div class="line">    <span class="attribute">list-style</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">table-layout</span>: ;</div><div class="line">    <span class="attribute">caption-side</span>: ;</div><div class="line">    <span class="attribute">border-collapse</span>: ;</div><div class="line">    <span class="attribute">border-spacing</span>: ;</div><div class="line">    <span class="attribute">empty-cells</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">font</span>: ;</div><div class="line">    <span class="attribute">font-family</span>: ;</div><div class="line">    <span class="attribute">font-size</span>: ;</div><div class="line">    <span class="attribute">line-height</span>: ;</div><div class="line">    <span class="attribute">font-weight</span>: ;</div><div class="line">    <span class="attribute">text-align</span>: ;</div><div class="line">    <span class="attribute">text-indent</span>: ;</div><div class="line">    <span class="attribute">text-transform</span>: ;</div><div class="line">    <span class="attribute">text-decoration</span>: ;</div><div class="line">    <span class="attribute">letter-spacing</span>: ;</div><div class="line">    <span class="attribute">word-spacing</span>: ;</div><div class="line">    <span class="attribute">white-space</span>: ;</div><div class="line">    <span class="attribute">vertical-align</span>: ;</div><div class="line">    <span class="attribute">color</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">background</span>: ;</div><div class="line">    <span class="attribute">background-color</span>: ;</div><div class="line">    <span class="attribute">background-image</span>: ;</div><div class="line">    <span class="attribute">background-repeat</span>: ;</div><div class="line">    <span class="attribute">background-position</span>: ;</div><div class="line"> </div><div class="line">    <span class="attribute">opacity</span>: ;</div><div class="line">    <span class="attribute">cursor</span>: ;</div><div class="line">    <span class="attribute">content</span>: ;</div><div class="line">    <span class="attribute">quotes</span>: ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript事件委派]]></title>
      <url>/2017/08/13/JavaScript%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%B4%BE/</url>
      <content type="html"><![CDATA[<p><strong><code>事件委派</code>的定义就是，把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素。</strong></p>
<blockquote>
<p>一个简单的例子：给ul中的li添加点击事件</p>
</blockquote>
<pre><code>&lt;ul id=&quot;list&quot; style=&quot;width:200px;border: 1px solid red;&quot;&gt;
    &lt;li&gt;1111&lt;/li&gt;
    &lt;li&gt;2222&lt;/li&gt;
    &lt;li&gt;3333&lt;/li&gt;
    &lt;li&gt;4444&lt;/li&gt;
&lt;/ul&gt;   
</code></pre><p><br></p>
<blockquote>
<p>传统的li点击事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oLi.length; i++) &#123;</div><div class="line">    oLi[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.innerHTML);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><br></p>
<blockquote>
<p>利用事件委派方法添加点击事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</div><div class="line">        </div><div class="line">oUl.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> target = e.target || e.srcElement;</div><div class="line">    <span class="built_in">console</span>.log(target.innerHTML);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><code>事件委派</code>的好处就是不在进行查询，减少了DOM操作，极大地改善了代码性能。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件委派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo运行hexo d -g报错]]></title>
      <url>/2017/07/30/hexo-2017-7-30/</url>
      <content type="html"><![CDATA[<p><img src="img/pusherror.png" alt="remote: error: GH007: Your push would publish a private email address"><br></p>
<h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><pre><code>1. 登录GitHub，打开Settings &gt; Emails，或者打开https://github.com/settings/emails
2. 选择Keep my email address private
3. 取消选择Block command line pushes that expose my email
</code></pre><p><img src="img/setemail.png" alt=""></p>
<p>重新运行<code>hexo d -g</code> ok</p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
